<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>

</body>

</html>
<script>
    let arr = [{
        id: '1',
        label: '四川省', children: [{ id: '2', label: '雅安', children: [{ id: '3', label: '雨城', children: [{ id: '4', label: '清江街道' }] }] },
        { id: '5', label: '成都', children: [{ id: '6', label: '城南', children: [{ id: '7', label: '城南街道' ,children:[{id:'22',label:'aa'}]}] }] },
        {
            id: '8', label: '成都2', children: [{ id: '9', label: '城南2', children: [{ id: '10', label: '城南街道2',children:[{id:'23',label:'bb'}] }] },
            { id: '11', label: '城南3', children: [{ id: '12', label: '城南街道3' }, { id: '13', label: '城南街道4',children:[{id:'24',label:'cc'}] }] }]
        }]
    }]
    function getTreeClear(arr, str, num) {
    let obj = {
        0: []
    }
    let result;
    const clear = (arr, arr2) => {
        arr.map((item, index) => {
            if (arr.length > 1) {
                const a = Symbol(item.value)
                obj[a] = [...arr2];
                if (item.children) {
                    obj[a].push(item.value);
                    clear(item.children, obj[a])
                } else {
                    obj[a].push(item.value);
                    return
                }
            } else {
                if (item.children) {
                    arr2.push(item.value);
                    clear(item.children, arr2)
                } else {
                    arr2.push(item.value);
                    return
                }
            }
        })
        return obj
    }
    const objList = clear(arr, obj[0])
    const objList2 =  Reflect.ownKeys(objList);
    for (let k of objList2) {
        if (objList[k][num - 1] === str) {
            result = objList[k]
        }
    }
    return result
}
    console.log(clear2(arr, '22',5));//数字5代表第五级
</script>
